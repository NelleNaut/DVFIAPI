/**
 * IntroductionDeversiFiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.PriceDataEndpointsController;
const GetConfigMainnet = testerlib.GetConfigMainnet;
const M0x = testerlib.M0x;
const TokenRegistry = testerlib.TokenRegistry;
const ETH = testerlib.ETH;
const USD = testerlib.USD;
const WBT = testerlib.WBT;
const MKR = testerlib.MKR;
const DAI = testerlib.DAI;
const UDC = testerlib.UDC;
const BAT = testerlib.BAT;
const NEC = testerlib.NEC;
const OMG = testerlib.OMG;
const ZRX = testerlib.ZRX;
const SNT = testerlib.SNT;
const SAN = testerlib.SAN;
const EDO = testerlib.EDO;
const FUN = testerlib.FUN;
const REP = testerlib.REP;
const SPK = testerlib.SPK;
const ENJ = testerlib.ENJ;
const TKN = testerlib.TKN;
const TSD = testerlib.TSD;
const GetOpenOrder = testerlib.GetOpenOrder;
const Meta = testerlib.Meta;
const GetOrderHistory = testerlib.GetOrderHistory;
const Meta1 = testerlib.Meta1;
const ReleaseTokens = testerlib.ReleaseTokens;
const ReleaseSignature = testerlib.ReleaseSignature;
const VolumeExampleRequest = testerlib.VolumeExampleRequest;
const Tokens = testerlib.Tokens;
const DAI1 = testerlib.DAI1;
const ETH1 = testerlib.ETH1;
const MKR1 = testerlib.MKR1;
const SPK1 = testerlib.SPK1;
const USD1 = testerlib.USD1;
const BlockInfo = testerlib.BlockInfo;
const Transaction = testerlib.Transaction;
const Event = testerlib.Event;
const Maker = testerlib.Maker;
const Taker = testerlib.Taker;
const TXIDInfo = testerlib.TXIDInfo;
const EventIDInfo = testerlib.EventIDInfo;
const MakerEventInfo = testerlib.MakerEventInfo;
const MakerEventTimePeriod = testerlib.MakerEventTimePeriod;
const TakerEventInfo = testerlib.TakerEventInfo;
const TakerEventTimePeriod = testerlib.TakerEventTimePeriod;
const AllTimeVolumeRanking = testerlib.AllTimeVolumeRanking;
const TimePeriodVolumeRanking = testerlib.TimePeriodVolumeRanking;
const AllTokensVolumeRanking = testerlib.AllTokensVolumeRanking;
const AllTokensVolumeRankingTimePeriod = testerlib.AllTokensVolumeRankingTimePeriod;
const M30DayVolumeSpecificAddress = testerlib.M30DayVolumeSpecificAddress;
const Tokens1 = testerlib.Tokens1;
const SAN1 = testerlib.SAN1;


describe("PriceDataEndpointsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * - Requests ticker data for a pair or for all pairs if no symbol is specified
- Response is formatted as per https://docs.bitfinex.com API v2

     */
    it("should testTickerData response", function testTickerDataTest(done) {
        // parameters for the API call
        let symbols = 'tMKRETH';
        let accept = 'application/json';
        let contentType = 'application/json';

        controller.getTickerData(symbols, accept, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Date'] = null;
            headers['Content-Type'] = null;
            headers['Transfer-Encoding'] = null;
            headers['Connection'] = null;
            headers['x-frame-options'] = null;
            headers['x-xss-protection'] = null;
            headers['x-download-options'] = null;
            headers['x-content-type-options'] = null;
            headers['strict-transport-security'] = null;
            headers['x-permitted-cross-domain-policies'] = null;
            headers['expect-ct'] = null;
            headers['content-encoding'] = null;
            headers['Via'] = null;
            headers['Alt-Svc'] = null;
            headers['Cache-Control'] = null;
            headers['CF-Cache-Status'] = null;
            headers['Vary'] = null;
            headers['Server'] = null;
            headers['CF-RAY'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.equal('[\r\n  [\r\n    "tMKRETH",\r\n    3.2581,\r\n    65.00764954,\r\n    3.282,\r\n    63.65934822,\r\n    -0.0438,\r\n    -0.0132,\r\n    3.2822,\r\n    101.88266246,\r\n    3.3532,\r\n    3.2394\r\n  ]\r\n]', context.response.body);
            done();
        }).catch(() => undefined);
    });
});
