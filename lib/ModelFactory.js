/**
 * IntroductionDeversiFiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const GetConfigMainnet = require('../lib/Models/GetConfigMainnet');
const M0x = require('../lib/Models/M0x');
const TokenRegistry = require('../lib/Models/TokenRegistry');
const ETH = require('../lib/Models/ETH');
const USD = require('../lib/Models/USD');
const WBT = require('../lib/Models/WBT');
const MKR = require('../lib/Models/MKR');
const DAI = require('../lib/Models/DAI');
const UDC = require('../lib/Models/UDC');
const BAT = require('../lib/Models/BAT');
const NEC = require('../lib/Models/NEC');
const OMG = require('../lib/Models/OMG');
const ZRX = require('../lib/Models/ZRX');
const SNT = require('../lib/Models/SNT');
const SAN = require('../lib/Models/SAN');
const EDO = require('../lib/Models/EDO');
const FUN = require('../lib/Models/FUN');
const REP = require('../lib/Models/REP');
const SPK = require('../lib/Models/SPK');
const ENJ = require('../lib/Models/ENJ');
const TKN = require('../lib/Models/TKN');
const TSD = require('../lib/Models/TSD');
const GetOpenOrder = require('../lib/Models/GetOpenOrder');
const Meta = require('../lib/Models/Meta');
const GetOrderHistory = require('../lib/Models/GetOrderHistory');
const Meta1 = require('../lib/Models/Meta1');
const ReleaseTokens = require('../lib/Models/ReleaseTokens');
const ReleaseSignature = require('../lib/Models/ReleaseSignature');
const VolumeExampleRequest = require('../lib/Models/VolumeExampleRequest');
const Tokens = require('../lib/Models/Tokens');
const DAI1 = require('../lib/Models/DAI1');
const ETH1 = require('../lib/Models/ETH1');
const MKR1 = require('../lib/Models/MKR1');
const SPK1 = require('../lib/Models/SPK1');
const USD1 = require('../lib/Models/USD1');
const BlockInfo = require('../lib/Models/BlockInfo');
const Transaction = require('../lib/Models/Transaction');
const Event = require('../lib/Models/Event');
const Maker = require('../lib/Models/Maker');
const Taker = require('../lib/Models/Taker');
const TXIDInfo = require('../lib/Models/TXIDInfo');
const EventIDInfo = require('../lib/Models/EventIDInfo');
const MakerEventInfo = require('../lib/Models/MakerEventInfo');
const MakerEventTimePeriod = require('../lib/Models/MakerEventTimePeriod');
const TakerEventInfo = require('../lib/Models/TakerEventInfo');
const TakerEventTimePeriod = require('../lib/Models/TakerEventTimePeriod');
const AllTimeVolumeRanking = require('../lib/Models/AllTimeVolumeRanking');
const TimePeriodVolumeRanking = require('../lib/Models/TimePeriodVolumeRanking');
const AllTokensVolumeRanking = require('../lib/Models/AllTokensVolumeRanking');
const AllTokensVolumeRankingTimePeriod = require('../lib/Models/AllTokensVolumeRankingTimePeriod');
const M30DayVolumeSpecificAddress = require('../lib/Models/M30DayVolumeSpecificAddress');
const Tokens1 = require('../lib/Models/Tokens1');
const SAN1 = require('../lib/Models/SAN1');

const classMap = {
    GetConfigMainnet,
    M0x,
    TokenRegistry,
    ETH,
    USD,
    WBT,
    MKR,
    DAI,
    UDC,
    BAT,
    NEC,
    OMG,
    ZRX,
    SNT,
    SAN,
    EDO,
    FUN,
    REP,
    SPK,
    ENJ,
    TKN,
    TSD,
    GetOpenOrder,
    Meta,
    GetOrderHistory,
    Meta1,
    ReleaseTokens,
    ReleaseSignature,
    VolumeExampleRequest,
    Tokens,
    DAI1,
    ETH1,
    MKR1,
    SPK1,
    USD1,
    BlockInfo,
    Transaction,
    Event,
    Maker,
    Taker,
    TXIDInfo,
    EventIDInfo,
    MakerEventInfo,
    MakerEventTimePeriod,
    TakerEventInfo,
    TakerEventTimePeriod,
    AllTimeVolumeRanking,
    TimePeriodVolumeRanking,
    AllTokensVolumeRanking,
    AllTokensVolumeRankingTimePeriod,
    M30DayVolumeSpecificAddress,
    Tokens1,
    SAN1,
};

/**
 * Factory class to create instances of models and exception classes
 */
class ModelFactory {
    /**
     * Creates instance of a model class
     * @param  modelName  {string}  Name of class to instantiate
     * @returns  {object} Instance of the model class
     */
    static getInstance(modelName) {
        return new classMap[modelName]();
    }
}

module.exports = ModelFactory;
