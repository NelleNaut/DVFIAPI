/**
 * IntroductionDeversiFiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of BlockInfo
 */
class BlockInfo extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.transactions = this.constructor.getValue(obj.transactions);
        this.id = this.constructor.getValue(obj.id || obj._id);
        this.exchangeWrapper = this.constructor.getValue(obj.exchangeWrapper);
        this.feeRecipientAddress = this.constructor.getValue(obj.feeRecipientAddress);
        this.number = this.constructor.getValue(obj.number);
        this.createdAt = this.constructor.getValue(obj.createdAt);
        this.date = this.constructor.getValue(obj.date);
        this.numTransactions = this.constructor.getValue(obj.numTransactions);
        this.timestamp = this.constructor.getValue(obj.timestamp);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'transactions', realName: 'transactions', array: true, type: 'Transaction' },
            { name: 'id', realName: '_id' },
            { name: 'exchangeWrapper', realName: 'exchangeWrapper' },
            { name: 'feeRecipientAddress', realName: 'feeRecipientAddress' },
            { name: 'number', realName: 'number' },
            { name: 'createdAt', realName: 'createdAt' },
            { name: 'date', realName: 'date' },
            { name: 'numTransactions', realName: 'numTransactions' },
            { name: 'timestamp', realName: 'timestamp' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = BlockInfo;
