/**
 * IntroductionDeversiFiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of M0x
 */
class M0x extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.protocol = this.constructor.getValue(obj.protocol);
        this.minOrderTime = this.constructor.getValue(obj.minOrderTime);
        this.tokenRegistry = this.constructor.getValue(obj.tokenRegistry);
        this.feeApiUrl = this.constructor.getValue(obj.feeApiUrl);
        this.ethfinexAddress = this.constructor.getValue(obj.ethfinexAddress);
        this.deversifiAddress = this.constructor.getValue(obj.deversifiAddress);
        this.exchangeAddress = this.constructor.getValue(obj.exchangeAddress);
        this.exchangeSymbols = this.constructor.getValue(obj.exchangeSymbols);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'protocol', realName: 'protocol' },
            { name: 'minOrderTime', realName: 'minOrderTime' },
            { name: 'tokenRegistry', realName: 'tokenRegistry', type: 'TokenRegistry' },
            { name: 'feeApiUrl', realName: 'feeApiUrl' },
            { name: 'ethfinexAddress', realName: 'ethfinexAddress' },
            { name: 'deversifiAddress', realName: 'deversifiAddress' },
            { name: 'exchangeAddress', realName: 'exchangeAddress' },
            { name: 'exchangeSymbols', realName: 'exchangeSymbols', array: true },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = M0x;
