{
  "name": "introductiondeversifilib",
  "version": "1.0.0",
  "description": "The DeversiFi API allows trading of cryptocurrency tokens from any Ethereum wallet or smart-contract.  **Note: DeversiFi currently uses version 2.1 of the 0x protocol for settlement on the Ethereum blockchain.**  The available endpoints allow access to submit, cancel and query placed orders onto the DeversiFi order book, whilst keeping full custody of funds and authenticating only using an Ethereum account. By using this API anyone is able to create and integrate their own interfaces, or run trading algorithms whilst keeping secure control of their funds in a personal Ethereum wallet.  If you are new to interacting with the Ethereum blockchain and DeversiFi API usage, be sure to go through the [Beginner API DeversiFi guide](#e4a19166-5710-406a-a856-485a217124e0).  This documentation set is actively maintained and updated. If you would like to suggest any changes or find there is something missing, please reach out to us via email -  feedback@deversifi.com - or leave a suggestion as a comment.  The base URL for requests is `https://api.deversifi.com`  - Trading base url: `https://api.deversifi.com/v1/trading/` - Public volume data base url: `https://api.deversifi.com/v1/pub/` - Price data base url (bitfinex proxy): `https://api.deversifi.com/bfx/v2/` - Price data websocket proxy base url (bitfinex proxy): `https://api.deversifi.com/bfx/ws/2/`  ---  # Libraries and Examples  A node.js client is available to interface with this API at https://github.com/ethfinex/efx-api-node  `npm i efx-api-node`  ---  # Public Endpoints  To request public data, for example order books, candles, or trade history, the format is identical to the Bitfinex Rest and Websocket APIs.  For an example of requesting the full Orderbook, please see [Get full Orderbook](#f3471e15-5e30-428c-83b3-da2dc63184e6).  For price data endpoints, the documentation for these is also available at https://docs.bitfinex.com/docs with the only change required being to switch `api.bitfinex.com` with `api.deversifi.com/bfx/` as the base url.  Websocket is recommended to stream orders, and a [javascript client library](https://github.com/bitfinexcom/bitfinex-api-node) makes this easy (please make sure to switch your base-url to the deversifi endpoints).  ---  # Authentication  No API key pair is required to be issued for the authenticated endpoints.  Instead authentication is done using an Ethereum private key to sign messages. This signing is done using the Ethereum web3 library and a code example is shown below.  ```javascript web3.eth.sign(toSign, address, (err, res) => {       if (err) { reject(err) }       resolve(res)     }) ```  The same basic method of authentication is used to sign different payloads in order to view the user's open orders, cancel orders, and place new ones.  Note that if using Metamask this should be `web3.eth.personal.sign` instead of `web3.eth.sign`. Examples are available in the node client: https://github.com/ethfinex/efx-api-node/blob/master/src/api/sign/sign.js  ---  # Smart Contracts  ### Mainnet  The following are the key contracts deployed on the Ethereum mainnet, as well as examples of some of the token Wrappers:  | Contract        | Address          | | ------------- |:-------------:| | Exchange0xV2.1 Contract    | [0x080bf510FCbF18b91105470639e9561022937712](https://etherscan.io/address/0x080bf510FCbF18b91105470639e9561022937712) | | ETHWrapper            | [0x50cB61AfA3F023d17276DCFb35AbF85c710d1cfF](https://etherscan.io/address/0x50cB61AfA3F023d17276DCFb35AbF85c710d1cfF)     | | USDTWrapper    | [0x33d019eb137b853f0cdf555a5d5bd2749135ac31](https://etherscan.io/address/0x33d019eb137b853f0cdf555a5d5bd2749135ac31)     | | MKRWrapper     | [0x91cf769a44e9d09b8e249886d0de4dbe0aa998f9](https://etherscan.io/address/0x91cf769a44e9d09b8e249886d0de4dbe0aa998f9) |  Full configuration information can be fetched using the [getConfig](#3d74c943-f274-4e92-a051-a9682a262de1) api request.   ### Kovan  The following contracts are deployed on the Kovan test network:  | Contract        | Address          | | ------------- |:-------------:| | Wrapper Registry         | [0x750DeaE872619eb2Cf6c65FD07FCbc60E8D98b73](https://kovan.etherscan.io/address/0x750DeaE872619eb2Cf6c65FD07FCbc60E8D98b73) | | Exchange Contract vEFX     | [0x77525f7db94116677dbd02c93829aba0c86d9768](https://kovan.etherscan.io/address/0x77525f7db94116677dbd02c93829aba0c86d9768) | | Exchange Contact 0xv2    | [0xf1ec01d6236d3cd881a0bf0130ea25fe4234003e](https://kovan.etherscan.io/address/0xf1ec01d6236d3cd881a0bf0130ea25fe4234003e)     |  This information and remaining token wrappers can be found by calling [getConfig](#3d74c943-f274-4e92-a051-a9682a262de1) api request using the `https://test.ethfinex.com/trustless/v1/` base url. Wrapper Registry also enables a lookup of different tokens for their wrappers.   # Time Lock Wrapper Contracts  The DeversiFi non-custodial exchange API uses wrapper token contracts to ensure that traders will always be able to settle all of their open orders if required. These 'wrapper tokens' lock the tokens access for a specified duration, and during that time the tokens are reserved and can only be transferred as a result of a successfully executed order. Early unlock can be requested from DeversiFi using the `/releaseTokens` endpoint, provided the user does not have any open orders.  While the tokens are locked, they can only be used by DeversiFi to fill the owner's submitted trades. Below an example code snippet of locking/unlocking is shown.  The process for locking ETH is slightly different than that for tokens.  ---  # Locking ETH  1. Call `deposit(amount, duration)` on the ETH Lock Contract. Amount is in `wei` and duration is in `hours`. This should also have the value of ETH you wish to deposit sent with the contract call.  ---  # Locking ERC20 Tokens  1. Call `approve(lockTokenContract, MAX_UINT)` . MAX_UINT = `2 ** 256 - 1`. This will allow the lockTokenContract to transfer on the user's behalf. This step only needs to be carried out the first time interacting with each new ERC20 token.  2. Call `deposit(amount, duration)`. This will transfer the specific token into the lockTokenContract.  These methods can be handled by the api-node library https://github.com/ethfinex/efx-api-node#locking-tokens and examples can be found in that library.  ```javascript const EFX = require('efx-api-node') const web3 = new EFX.Web3(/*your web3 provider*/) const efx = await EFX( web3 )  const token = 'ZRX' const amount = 15 // Number of tokens to lock const forTime = 48 // Time after which unlocking does not require permission  const allowance = await efx.contract.isApproved(token) if (allowance === 0 || allowance < amount) {     await efx.contract.approve(token) }  const response = await efx.contract.lock(token, amount, forTime)  ```  The above function can be used to lock tokens. The efx-api-node library takes care of mapping details from a particular token 3-letter code to its token address, lock wrapper address, and decimals.  The process for unlocking tokens requires either: 1. The time lock has expired already, 2. You have no open orders and request an early release signature from DeversiFi.  ```javascript const token = 'ZRX' const amount = 15 // Number of tokens to lock  const response = await efx.contract.unlock(token, amount)  ```  **Please note, when unlocking any token the whole amount of the token is unlocked, and so cannot be unlocked in part.**  ---  # USD Tether Markets    The XXX/USDT markets on DeversiFi build on the liquidity of XXX/USD markets on the centralised Bitfinex exchange. However since there is often not a direct 1:1 rate between USD and USDT, a shift must be applied to the order books.  The configuration for DeversiFi returns a `settleSpread` parameter:  ```json       \"USD\":{           \"decimals\":6,           \"wrapperAddress\":\"0x83e42e6d1ac009285376340ef64bac1c7d106c89\",           \"tokenAddress\":\"0x0736d0c130b2ead47476cc262dbed90d7c4eeabd\",           \"minOrderSize\":10,           \"settleSpread\": 0.02       } ```  This `settleSpread` is indicative of the current USDT/USD exchange rate. When orders are placed on USDT markets, the settlement price in the signed order must be shifted by the settleSpread parameter before the order is accepted.  For example, if placing a buy order on the ETH/USD(T) market at a price of 100 USD relative to the centralised exchange the order will be settled on DeversiFi at a price of 102 USDT. Equally a sell order at 100 USD would receive 102 USDT when settled on DeversiFi.  ```javascript efx.submitOrder(symbol, amount, price) // => settlementPrice = price * (1 + settleSpread) ```  The `settleSpread` parameter is set dynamically as a 30 minute rolling mean of the USDT/USD market exchange rate. When placing orders using submitOrder or generating them with createOrder the shift is applied for you.  ---  # Error Codes  Error codes are returned to indicate when submitted orders, or other requests are invalid.  The node.js library for the API contains a list of errors, along with [human readable explanations](https://github.com/ethfinex/efx-api-node/blob/master/src/lib/error/reasons.js).  Many of these codes relate to an incorrect match between the fields in the submitted [0x Order format](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#order-message-format) and those specified in the API order. Orders once submitted via API are checked to ensure all the parameters meet the requirements before they can be added to the order books.  These checks include amongst others: 1. Exchange address is specified as DeversiFi's address. This is returned by the [/r/get/conf](#3d74c943-f274-4e92-a051-a9682a262de1) . 2. Maker and taker token addresses and amounts match the pair, amount and price of the submitted order. Note that addresses here are the wrapper addresses, not the base token addresses. 3. The address placing the order has sufficient locked funds, and that the remaining expiry time of the lock is greater than the expiry time of the order. 4. The signature of the hashed order is valid.  For more information on preparing this order format please see [0x Order format](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#order-message-format).  ---  # Troubleshooting  `ERR_MAKERTOKEN_ADDRESS_INVALID`  If you receive this error the 'maker' token address provided in the 0x order format did not match the pair specified by the API call.  The DeversiFi setup requires that you have temporarily 'time-locked' the tokens you will trade into a wrapper contract. You should verify that in the field `makerToken` of the [0x order JSON](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#order-message-format) you have specified this wrapper contract address rather than the original token address. Make sure you are using an up to date token wrapper mapping from DeversiFi for mainnet.  The `makerToken` is always the token *which you will send* when the order is successfully executed.  ---  `ERR_TAKERTOKEN_ADDRESS_INVALID`  If you receive this error the 'taker' token address provided in the 0x order format did not match the pair specified by the API call.  Make sure you are using the correct token address in the field  `takerToken` of the [0x order format](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#order-message-format) for the decentralized order. This token depends on the pair of the trade and whether you are placing a BUY or SELL. The `takerToken` is always the token *which you will receive* when the order is successfully executed.  This error may also be given if placing orders on USDT markets, without applying the `settleSpread` conversion. [See here for more](#usd-tether-markets).  ---  `ERR_MAKERTOKEN_AMOUNT_INVALID` or  `ERR_TAKERTOKEN_AMOUNT_INVALID`  The specified 0x order JSON maker amount did not match with the amount and price specified in the API call.  Make sure that `makerTokenAmount` and `takerTokenAmount` in the [0x order format](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#order-message-format) match the amounts in the normal API order. Note that the 0x order takes the amounts in base units (wei) while the normal order takes them in tokens. Make sure you are using the correct number of decimals for this conversion.  This error may also be given if placing orders on USDT markets, without applying the `settleSpread` conversion. [See here for more](#usd-tether-markets).  ---  `ERR_0X_SIGNATURE_INVALID`  The 0x signed order hash was invalid.  Check the documentation to make sure you are correctly signing the 0x order, and make sure you are placing it in the submitted order object before posting a new order.  ---  `ERR_0X_FEE_RECIPIENT_INVALID`  The fee recipient address, `feeRecipient` in the [0x order format](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#order-message-format), was not specified as DeversiFi. This setup requires that each order placed specifies DeversiFi as the recipient of any fees.  If you receive this error, make sure you are using the address specified in the documentation as the fee recipient for the DeversiFi order.  ---  `ERR_0X_EXCHANGE_INVALID`  The exchange contract address for the trade was not specified correctly. The field `exchangeContractAddress` in the [0x order JSON](https://github.com/0xProject/0x-protocol-specification/blob/master/v2/v2-specification.md#order-message-format) must specify DeversiFi's contract address.  If you get this error, make sure you are using the exchange contract address specified by DeversiFi's documentation.  ---  `ERR_0X_TAKER_INVALID`  The 0x order format allows taker address to be left blank and therefore for anyone to fill an order. In order for the order to be accepted onto the DeversiFi order book it must specify the `taker` field to be DeversiFi.  If you receive this error, make sure you are using the address specified by DeversiFi as the taker for the order.  ---  `ERR_0X_EXPIRED`  The order expiration date was too soon, or already passed. Make sure the expiration date, which is specified by `expirationTimestampInSec` is in the future and at least 1 hour away.  ---  `ERR_0X_BELOW_MIN_SIZE`  The order was below the minimum threshold. Because of the fees involved with settling trades over Ethereum, a minimum size is required.  Make sure the order is for an amount above the DeversiFi threshold, which is (TBD)  ---  `ERR_0X_LOCK_TIME_INSUFFICIENT`  The order expires after the time lock on the tokens is released. Orders will only be accepted onto the DeversiFi order book if the tokens are locked into the wrapper for longer than the expiry time of the order. This ensures that the order book is always a true representation of the available liquidity.  Make sure that when generating orders you use an expiration which is sooner than the lock duration remaining on your tokens. Alternatively re-lock your tokens to increase the duration. You should always be able to release your tokens early if no longer used in active orders by requesting an unlock signature from DeversiFi.  ---  `ERR_0X_MAKER_INSUFFICIENT_BALANCE`  Not enough balance of time locked tokens to place the order.  Make sure that you have locked a sufficient amount of tokens for the order into the wrapper contracts.  ---  `ERR_UNLOCK_TOO_LONG`  The requested unlock signature is valid for an excessive time period.  As you will not be able to place orders during the unlocked period, there is a maximum limit to how long it is allowed to be. Please try a shorter unlock duration.",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/username/repository.git"
  },
  "scripts": {
    "lint": "eslint lib",
    "test": "mocha --recursive"
  },
  "author": "APIMATIC SDK Generator",
  "bugs": {
    "email": "support@apimatic.io"
  },
  "license": "MIT",
  "devDependencies": {
    "eslint": "^3.18.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.10.3",
    "mocha": "^5.2.0",
    "chai": "^3.5.0"
  },
  "dependencies": {
    "moment": "^2.17.1",
    "request": "^2.55.0"
  },
  "eslintConfig": {
    "extends": "airbnb",
    "env": {
      "commonjs": true,
      "node": true,
      "mocha": true
    },
    "rules": {
      "indent": [
        "error",
        4
      ],
      "no-underscore-dangle": 0,
      "strict": 0,
      "prefer-rest-params": 0
    }
  }
}